[tool.poetry]
name = "gp-libs"
version = "0.0.3"
description = "Internal utilities for projects following git-pull python package spec"
license = "MIT"
authors = ["Tony Narlock <tony@git-pull.com>"]
classifiers = [
  "Development Status :: 4 - Beta",
  "License :: OSI Approved :: MIT License",
  "Environment :: Web Environment",
  "Framework :: Pytest",
  "Intended Audience :: Developers",
  "Operating System :: POSIX",
  "Operating System :: MacOS :: MacOS X",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Topic :: Utilities",
  "Topic :: System :: Shells",
]
packages = [
  { include = "*", from = "src" },
]
include = [
  { path = "tests", format = "sdist" },
]
readme = 'README.md'
keywords = []

homepage = "https://gp-libs.git-pull.com"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/git-pull/gp-libs/issues"
Documentation = "https://gp-libs.git-pull.com"
Repository = "https://github.com/git-pull/gp-libs"
Changes = "https://github.com/git-pull/gp-libs/blob/master/CHANGES"

[tool.poetry.dependencies]
python = "^3.8"
myst_parser = ">=0.18.1"
docutils = "*"

[tool.poetry.group.dev.dependencies]
### Docs ###
sphinx = "*"
furo = "*"
sphinx-autodoc-typehints = "*"
sphinx-autobuild = "*"
sphinx-inline-tabs = "*"
sphinxext-opengraph = "<0.8" # https://github.com/wpilibsuite/sphinxext-opengraph/issues/100
sphinx-copybutton = "*"
sphinxext-rediraffe = "*"

### Testing ###
pytest = "*"
pytest-rerunfailures = "*"
pytest-watcher = "*"

### Coverage ###
codecov = "*"
coverage = "*"
pytest-cov = "*"

### Lint ###
black = "*"
ruff = "*"
mypy = "*"
typing-extensions = { version = "*" }
types-docutils = "*"

[tool.poetry.extras]
docs = [
  "sphinx",
  "sphinx-autodoc-typehints",
  "sphinx-autobuild",
  "sphinx-copybutton",
  "sphinxext-opengraph",
  "sphinx-inline-tabs",
  "sphinxext-rediraffe",
  "furo",
]
test = ["pytest", "pytest-rerunfailures", "pytest-watcher"]
coverage = ["codecov", "coverage", "pytest-cov"]
lint = [
  "black",
  "ruff",
  "mypy",
  "types-docutils",
  "typing-extensions",
]

[tool.poetry.plugins.pytest11]
sphinx = "pytest_doctest_docutils"

[tool.mypy]
strict = true
files = [
  "src/",
  "tests/",
]

[tool.ruff]
target-version = "py38"
select = [
  "E", # pycodestyle
  "F", # pyflakes
  "I", # isort
  "UP", # pyupgrade
  "B", # flake8-bugbear
  "C4", # flake8-comprehensions
  "Q", # flake8-quotes
  "PTH", # flake8-use-pathlib
  "SIM", # flake8-simplify
  "TRY", # Trycertatops
  "PERF", # Perflint
  "RUF", # Ruff-specific rules
]

[tool.ruff.isort]
known-first-party = [
  "src",
  "doctest_document",
  "docutils_compat",
  "gp_libs",
  "linkify_issues",
  "pytest_doctest_docutils",
]
combine-as-imports = true

[tool.ruff.per-file-ignores]
"*/__init__.py" = ["F401"]

[tool.pytest.ini_options]
addopts = "--tb=short --no-header --showlocals --doctest-modules"
doctest_optionflags = "ELLIPSIS NORMALIZE_WHITESPACE"
testpaths = [
  "tests",
  "docs",
  "src",
]
filterwarnings = [
  "ignore:distutils Version classes are deprecated. Use packaging.version instead.",
  "ignore:The frontend.Option(Parser)? class.*:DeprecationWarning::",
]

[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
